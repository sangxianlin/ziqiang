{"version":3,"sources":["download.scss","common/_functions.scss"],"names":[],"mappings":"AAGA;EACI,aAAa,EAChB;;AACD;EACI,YAAY;EACZ,aAAa;EACb,6CAA2C;EAC3C,uBAAuB;EACvB,iBAAiB,EACpB;;AACD;EACI,eCiIS;EDhIT,gBCgIS;ED/HT,kDAAgD;EAChD,uBAAuB;EACvB,mCC6HS,ED3HZ;;AACD;EACI,sBCyHS;EDxHT,YAAY;EACZ,mBAAmB;EACnB,uBCsHS,EDpHZ;;AACD;EACI,eAAe;EACf,kBCiHS;EDhHT,mBCgHS;ED/GT,oDAAkD;EAClD,uBAAuB;EACvB,0BAAuB,EAC1B;;AAID;EACI,eCuGS;EDtGT,iBCsGS;EDrGT,iDAA+C;EAC/C,uBAAuB;EACvB,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,UAAU;EAEV,sBC8FS,ED3FZ","file":"download.css","sourcesContent":["@import \"common/_functions.scss\";\n@import \"common/_variables.scss\";\n\nhtml,body{\n    height: 100%;\n}\n.download{\n    width: 100%;\n    height: 100%;\n    background:url(../img/bg.jpg) no-repeat 0 0;\n    background-size: cover;\n    overflow: hidden;\n}\n.logo{\n    width: rem(156);\n    height: rem(156);\n    background:url(../img/logo@2x.png) no-repeat 0 0;\n    background-size: cover;\n    margin:rem(50) auto rem(28);\n\n}\n.txt{\n    font-size:rem(28);\n    color: #fff;\n    text-align: center;\n    letter-spacing:rem(45);\n\n}\n.button{\n    display: block;\n    width: rem(238);\n    height: rem(56);\n    background:url(../img/button@2x.png) no-repeat 0 0;\n    background-size: cover;\n    margin: rem(100) auto 0;\n}\n\n\n\n.pic{\n    width: rem(492);\n    height: rem(768);\n    background:url(../img/pic@2x.png) no-repeat 0 0;\n    background-size: cover;\n    margin: 0 auto;\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    // transform: translateX(-50%);\n    margin-left:rem(-246)\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// Foundation by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n// This is the default html and body font-size for the base rem value.\n$rem-base: 16px !default;\n\n// IMPORT ONCE\n// We use this to prevent styles from being loaded multiple times for compenents that rely on other components. \n$modules: () !default;\n@mixin exports($name) {\n  $module_index: index($modules, $name);\n  @if (($module_index == null) or ($module_index == false)) {\n    $modules: append($modules, $name);\n    @content;\n  }\n}\n\n//\n// @functions\n//\n\n\n// RANGES\n// We use these functions to define ranges for various things, like media queries. \n@function lower-bound($range){\n  @if length($range) <= 0 {\n    @return 0;\n  }\n  @return nth($range,1);\n}\n\n@function upper-bound($range) {\n  @if length($range) < 2 {\n    @return 999999999999;\n  }\n  @return nth($range, 2);\n}\n\n// STRIP UNIT\n// It strips the unit of measure and returns it\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n// CONVERT TO REM\n@function convert-to-rem($value, $base-value: $rem-base)  {\n  $value: strip-unit($value) / strip-unit($base-value) * 1rem;\n  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0\n  @return $value;\n}\n\n@function data($attr) {\n  @if $namespace {\n    @return '[data-' + $namespace + '-' + $attr + ']';\n  }\n\n  @return '[data-' + $attr + ']';\n}\n\n// REM CALC \n\n// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.\n// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:\n// \n//   rem-calc(10 20 30px 40);\n// \n// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets\n// \n//   rem-calc((10, 20, 30, 40px));\n// \n// Optionally call with a different base (eg: 8px) to calculate rem.\n// \n//   rem-calc(16px 32px 48px, 8px);\n// \n// If you require to comma separate your list\n// \n//   rem-calc((16px, 32px, 48), 8px);\n\n@function rem-calc($values, $base-value: $rem-base) {\n  $max: length($values);\n\n  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }\n\n  $remValues: ();\n  @for $i from 1 through $max {\n    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));\n  }\n  @return $remValues;\n}\n\n// OLD EM CALC\n// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()\n@function emCalc($values){\n  @return rem-calc($values);\n}\n\n// OLD EM CALC\n// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()\n@function em-calc($values){\n  @return rem-calc($values);\n}\n\n//vm\n$max-breakpoint:750;\n// This could be one of your media query breakpoint variables\n$wide-screen: \"(min-width: #{$max-breakpoint}px)\";\n\n// Function\n@function get-vw($target) {\n  // 1 vw is equal to 1% of the viewport width\n  $vw-context: ($max-breakpoint * .01) * 1px; // 1% viewport width\n  @return ($target/$vw-context) * 1vw;\n}\n\n// Mixin\n@mixin vw($size) {\n  font-size: get-vw($size);\n  // Prevent font-size from getting too big\n  @media #{$wide-screen} {\n    font-size: $size;\n  }\n}\n\n\n// If the width of the viewport is 1025px or wider, the font size will remain at 72px. Otherwise, the value will adjust as 7.2vw.\n// .headline {\n//   font-size: 4.5em; // Fallback\n//   @include vw(72px);\n// }\n\n\n@function pxToRem($value, $base:750) {\n  @if unit($value) == \"px\" or unit($value) == \"\" {\n    @return (strip-unit($value) / ($base / 10)) * 1rem;\n  }@else {\n    @return $value;\n  }\n\n\n}\n\n@function rem($px){\n  @return $px / 75 * 1rem;\n}\n\n\n\n//icon\n@mixin tick($width,$height,$border-width,$border-color,$rotate,$translateX,$translateY){\n  width: $width;\n  height: $height;\n  border-top: $border-width solid $border-color;\n  border-left: $border-width solid $border-color;\n  transform: rotate($rotate) translate3d($translateX,$translateY,0);\n  -ms-transform: rotate($rotate) translate3d($translateX,$translateY,0); /* IE 9 */\n  -webkit-transform: rotate($rotate) translate3d($translateX,$translateY,0);/* Safari and Chrome */\n  -o-transform: rotate($rotate) translate3d($translateX,$translateY,0);/* Opera */\n  -moz-transform: rotate($rotate) translate3d($translateX,$translateY,0);\n}\n@function px2rem($px){\n  @return $px / 75 * 1rem;\n}\n\n@mixin setFont($header, $size) {\n  #{$header} {\n    font-size: px2rem($size);\n  }\n}\n@mixin translate($translateX,$translateY) {\n  transform: translate3d($translateX,$translateY,0);\n  -ms-transform: translate3d($translateX,$translateY,0); /* IE 9 */\n  -webkit-transform: translate3d($translateX,$translateY,0);/* Safari and Chrome */\n  -o-transform: translate3d($translateX,$translateY,0);/* Opera */\n  -moz-transform: translate3d($translateX,$translateY,0);\n}"],"sourceRoot":"../css/"}